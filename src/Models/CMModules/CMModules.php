<?phpclass CMModules extends CObject{	public function __construct()	{		parent::__construct();	}		/**	* A list of all available controllers/methods	*	* @returns array list of controllers (key) and an array of methods	*/	public function AvailableControllers()	{   		$controllers = array();		foreach($this->config['controllers'] as $key => $val)		{			if($val['enabled'])			{				$rc = new ReflectionClass($val['class']);				$controllers[$key] = array();				$methods = $rc->getMethods(ReflectionMethod::IS_PUBLIC);				foreach($methods as $method)				{					if($method->name != '__construct' && $method->name != '__destruct' && $method->name != 'Index')					{						$methodName = mb_strtolower($method->name);						$controllers[$key][] = $methodName;					}				}				sort($controllers[$key], SORT_LOCALE_STRING);			}		}		ksort($controllers, SORT_LOCALE_STRING);		return $controllers;	}		/**	* Read and analyse all modules.	*	* @returns array with a entry for each module with the module name as the key.	*                Returns boolean false if $src can not be opened.	*/	public function ReadAndAnalyse()	{		$src = array(			'/src/Controllers',			'/src/Core',			'/src/Models',			'/site/Controllers',			'/site/Models',		);				$modules = array();				foreach($src as $dir)		{			$modules = array_merge($modules, $this->ReadDir($dir));		}				ksort($modules, SORT_LOCALE_STRING);		return $modules;	}		private function ReadDir($src)	{		if(!$dir = dir(MVC_INSTALL_PATH.$src)) throw new Exception('Could not open the directory.');		$modules = array();		while (($module = $dir->read()) !== false)		{			if(is_dir(MVC_INSTALL_PATH."$src/$module"))			{				if(class_exists($module))				{					$rc = new ReflectionClass($module);					$modules[$module]['name']			= $rc->name;					$modules[$module]['interface']		= $rc->getInterfaceNames();					$modules[$module]['isController']	= $rc->implementsInterface('IController');					$modules[$module]['isModel']		= preg_match('/^CM[A-Z]/', $rc->name);					$modules[$module]['isManageable']	= $rc->implementsInterface('IModule');					$modules[$module]['isLydiaCore']	= in_array($rc->name, array('CLydia', 'CDatabase', 'CRequest', 'CViewContainer', 'CSession', 'CObject'));					$modules[$module]['isLydiaCMF']		= in_array($rc->name, array('CForm', 'CCPage', 'CCBlog', 'CMUser', 'CCUser', 'CMContent', 'CCContent', 'CHTMLPurifier'));				}			}		}		$dir->close();				return $modules;	}		/**	* Install all modules.	*	* @returns array with a entry for each module and the result from installing it.	*/	public function Install()	{		$allModules = $this->ReadAndAnalyse();		uksort($allModules, function($a, $b)			{				return ($a == 'CMUser' ? -1 : ($b == 'CMUser' ? 1 : 0));			}		);		$installed = array();		foreach($allModules as $module)		{			if($module['isManageable'])			{				$classname = $module['name'];				$rc = new ReflectionClass($classname);				$obj = $rc->newInstance();				$method = $rc->getMethod('Manage');				$installed[$classname]['name']    = $classname;				$installed[$classname]['result']  = $method->invoke($obj, 'install');			}		}		ksort($installed, SORT_LOCALE_STRING);		return $installed;	}}