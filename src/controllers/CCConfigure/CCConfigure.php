<?php/*** Configuration controller** @package NocturnalCore*/class CCConfigure extends CObject implements IController{	public function __construct()	{		parent::__construct();	}		/**	 * The start of the configuration	 * 	 * 	 */		public function Index()	{		if ($this->user->InGroup('admin') || !$this->config['installed'])		{			$this->views->SetTitle('Configuration Index');			$this->views->AddView('configure/index.tpl.php',array(),'primary');			$this->views->AddView('configure/sidebar.tpl.php',array(),'sidebar');		}		else		{			$this->views->SetTitle('Error');			$this->views->AddView('configure/unauthorized.tpl.php',array(),'primary');		}	}		/**	 * Update the framework	 *	 *	 */		public function Update()	{		if ($this->user->InGroup('admin'))		{			$model = new CMUpdate();			$model->Update();		}		$this->RedirectToController('index');	}		/**	 * Shows how to install Nocturnal	 * 	 *	 */		public function Install()	{		if ($this->user->InGroup('admin') || !$this->config['installed'])		{			$this->views->SetTitle('Install the modules');			$this->views->AddView('configure/install.tpl.php',array(),'primary');			$this->views->AddView('configure/sidebar.tpl.php',array(),'sidebar');		}		else		{			$this->views->SetTitle('Error');			$this->views->AddView('configure/unauthorized.tpl.php',array(),'primary');		}	}		/**	 * Completes the installation	 * 	 *	 */		public function Complete()	{		if ($this->user->InGroup('admin'))		{			$config = new CMConfig();			$config->Complete();			$this->views->SetTitle('Install complete');			$this->views->AddView('configure/complete.tpl.php',array(),'primary');			$this->views->AddView('configure/sidebar.tpl.php',array(),'sidebar');		}		else		{			$this->views->SetTitle('Error');			$this->views->AddView('configure/unauthorized.tpl.php',array(),'primary');		}	}		/**	 * Configure Nocturnal	 * 	 * 	 */		public function Configure()	{		if ($this->user->InGroup('admin') || !$this->config['installed'])		{			$form = $this->getConfigurationForm();						$form->Check();						$this->views->SetTitle('Configure');			$this->views->AddView('configure/configure.tpl.php',array('form'=>$form->GetHTML()),'primary');			$this->views->AddView('configure/sidebar.tpl.php',array(),'sidebar');		}		else		{			$this->views->SetTitle('Error');			$this->views->AddView('configure/unauthorized.tpl.php',array(),'primary');		}	}		/**	 * Callback-function for Configure	 * 	 * @param CForm to be processed	 */		public function DoConfigure($form)	{		$config = new CMConfig();		$config->ApplyConfig($form);		$this->RedirectToController('index');	}		/**	 * returns the configuration form	 * 	 * 	 */		private function getConfigurationForm()	{		$model = new CMConfig();		$form = new CFormConfigure();				/*---------------------------- Site ------------------------------------*/		$form->AddElement(new CFormElementHeading('Site'));		$form->AddElement(new CFormElementText('header',	array('value' => $this->config['theme']['data']['header'])));		$form->AddElement(new CFormElementText('slogan',	array('value' => $this->config['theme']['data']['slogan'])));		$form->AddElement(new CFormElementText('footer',	array('value' => htmlent($this->config['theme']['data']['footer']))));				/*---------------------------- Theme ------------------------------------*/				$form->AddElement(new CFormElementHeading('Theme'));				$form->AddElement(new CFormElementSelect('theme', array('options' => $model->getThemes())));				/*---------------------------- Navigation ------------------------------------*/				$form->AddElement(new CFormElementHeading('Navigation(Menus)'));		for ($i=0; $i<3; $i++)		{			$form->AddElement(new CFormElementSelect('nav-'.($i*3+1), array('options' => $model->getMenus($i*3))));			$form->AddElement(new CFormElementSelect('nav-'.($i*3+2), array('options' => $model->getMenus($i*3+1))));			$form->AddElement(new CFormElementSelect('nav-'.($i*3+3), array('options' => $model->getMenus($i*3+2))));			$form->AddElement(new CFormElementText('nav-'.($i*3+1).'-title', array('value' => $model->getNavText($i*3))));			$form->AddElement(new CFormElementText('nav-'.($i*3+2).'-title', array('value' => $model->getNavText($i*3+1))));			$form->AddElement(new CFormElementText('nav-'.($i*3+3).'-title', array('value' => $model->getNavText($i*3+2))));		}				/*---------------------------- Database ------------------------------------*/				$form->AddElement(new CFormElementHeading('Database'));				$form->AddElement(new CFormElementCheckbox('dbactive', 		array('checked' => $this->config['database']['active'],				'label' => 'Active?')));		$form->AddElement(new CFormElementSelect('dbdriver',		array('options' => $model->getDatabaseDrivers(),						'label' => 'Driver:')));		$form->AddElement(new CFormElementText('dbdsn',				array('value'	=> $this->config['database']['dsn'],				'label' => 'DSN:')));		$form->AddElement(new CFormElementText('dbhost',			array('value'	=> $this->config['database']['host'],				'label' => 'Host:')));		$form->AddElement(new CFormElementText('db',				array('value'	=> $this->config['database']['db'],					'label' => 'Database:')));		$form->AddElement(new CFormElementText('dbuser',			array('value'	=> $this->config['database']['user'],				'label' => 'User:')));		$form->AddElement(new CFormElementCheckbox('usedbpw',		array('checked'	=> !empty($this->config['database']['password']),	'label' => 'Use password?')));		$form->AddElement(new CFormElementPassword('dbpassword',	array('label'	=> '*Password: ')));		$form->AddElement(new CFormElementPassword('dbpassword2',	array('label'	=> '*Password again: ')));				/*---------------------------- Debug ------------------------------------*/				$form->AddElement(new CFormElementHeading('Debug'));				$form->AddElement(new CFormElementCheckboxGroup('debug', array('options' => $model->getDebugSettings(), 'columns' => 4)));						/*---------------------------- Other ------------------------------------*/				$form->AddElement(new CFormElementHeading('Other'));				$form->AddElement(new CFormElementCheckbox('allowusercreation', array('checked' => $this->config['create_new_users'], 'label' => 'Allow creation of new users?')));				$form->AddElement(new CFormElementSelect('timezone', array('options' => $model->getTimezones())));				$form->AddElement(new CFormElementSubmit('Save', array('callback' => array($this, 'DoConfigure'))));				return $form;	}		/**	 * Show all controllers	 * 	 * 	 */		public function Controllers()	{		if ($this->user->InGroup('admin') || !$this->config['installed'])		{			$form = $this->getControllersForm();						$form->Check();						$this->views->SetTitle('Controllers');			$this->views->AddView('configure/controllers.tpl.php',array('form'=>$form->GetHTML()),'primary');			$this->views->AddView('configure/sidebar.tpl.php',array(),'sidebar');		}		else		{			$this->views->SetTitle('Error');			$this->views->AddView('configure/unauthorized.tpl.php',array(),'primary');		}	}		/**	 * Callback function for Controllers, applies settings to controllers	 * 	 * @param CForm to be processed	 */		public function DoApplyControllers($form)	{		$config = new CMConfig();		$config->ApplyControllers($form);		$this->RedirectToController('controllers');	}		/**	 * Returns the form for the controllers	 * 	 * 	 */		private function getControllersForm()	{		$model = new CMConfig();		$form = new CFormControllers(null, array());				$form->AddElement(new CFormElementHeading('Inactive:'));				foreach($model->getInactiveControllers() as $key => $value)		{			$form->AddElement($value['element']);			$form->AddElement(new CFormElementText($value['element']['name'].'-url',array('label' => 'Url:', 'value' => $value['url'])));			$form->AddElement(new CFormElementHidden($value['element']['name'].'-old-url', array('value' => $value['url'])));		}				$form->AddElement(new CFormElementHeading('Active:'));				foreach($model->getActiveControllers() as $key => $value)		{			$form->AddElement($value['element']);			$form->AddElement(new CFormElementText($value['element']['name'].'-url',array('label' => 'Url:', 'value' => $value['url'])));			$form->AddElement(new CFormElementHidden($value['element']['name'].'-old-url', array('value' => $value['url'])));		}				$form->AddElement(new CFormElementSubmit('Apply', array('callback' => array($this, 'DoApplyControllers'))));				return $form;	}}