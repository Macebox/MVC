<?php/*** The core of the core, so to speak.** @package NocturnalCore*/class CNocturnal implements ISingleton{	private static $instance = null;		private $exceptionMessages = "";		/**	*	Singleton pattern	*/	public static function Instance()	{		if (self::$instance == null)		{			self::$instance = new CNocturnal();		}		return self::$instance;	}		protected function __construct()	{		$mvc = &$this;				/*Configuration*/				require(MVC_SITE_PATH.'/config.php');		date_default_timezone_set($this->config['timezone']);				/*~Configuration*/				/*Session management*/				session_start();		$this->session = new CSession($this->config['session_key']);		$this->session->PopulateFromSession();				if ($this->session->GetFlash('pageTimeStart'))		{			$this->session->__set('pageTimeStart', $this->session->GetFlash('pageTimeStart'));		}		else		{			$this->session->__set('pageTimeStart', microtime(true));		}				/*~Session management*/				/*Database management*/				$this->database = new CDatabase(			$this->config['database']['dbDriver'],			$this->config['database']['host'],			$this->config['database']['user'],			$this->config['database']['password'],			$this->config['database']['db']		);				/*~Database management*/				$this->views = new CViewContainer();				$this->user = new CMUser($this);	}		/**	* Breaks down the request_uri to controller/method/args/.../	*	*	*/		public function FrontControllerRoute()	{		/*Get required information*/		$this->data['debug']  = "REQUEST_URI - {$_SERVER['REQUEST_URI']}\n";		$this->data['debug'] .= "SCRIPT_NAME - {$_SERVER['SCRIPT_NAME']}\n";		$this->request = new CRequest();		$this->request->Init($this->config['base_url'], $this->config['routing']);		$controller		= $this->request->controller;		$method 		= str_replace(array('_', '-'), '', $this->request->method);		$arguments		= $this->request->arguments;				/*Check if called controller exists*/		$controllerExists    = isset($this->config['controllers'][$controller]);		$controllerEnabled    = false;		$className             = false;		$classExists           = false;		if($controllerExists)		{			$controllerEnabled    = ($this->config['controllers'][$controller]['enabled'] == true);			$className               = $this->config['controllers'][$controller]['class'];			$classExists           = class_exists($className);		}				if($controllerExists && $controllerEnabled && $classExists)		{			$rc = new ReflectionClass($className);			if($rc->implementsInterface('IController'))			{				if($rc->hasMethod($method))				{					$controllerObj = $rc->newInstance();					$methodObj = $rc->getMethod($method);					$methodObj->invokeArgs($controllerObj, $arguments);				}				else				{					die("404. " . get_class() . ' error: Controller does not contain method.');				}			}			else			{				die('404. ' . get_class() . ' error: Controller does not implement interface IController.');			}		}		else		{			die('404. Page is not found.');		}	}		/**	* Renders the current view.	*	*	*/		public function ThemeEngineRender()	{		$this->session->StoreInSession();				if (!isset($this->config['theme'])) {return;}				$themePath    = MVC_INSTALL_PATH . $this->config['theme']['path'];		$themeUrl     = $this->request->base_url . $this->config['theme']['path'];				if(isset($this->config['theme']['parent']))		{			$parentPath = MVC_INSTALL_PATH . '/' . $this->config['theme']['parent'];			$parentUrl   = $this->request->base_url . $this->config['theme']['parent'];		}	   		// Add stylesheet path to the $ly->data array		$this->data['stylesheet'] = $this->request->base_url."style.php";		$this->data['themeUrl'] = $themeUrl;		$this->data['themeParentUrl'] = (isset($parentUrl)?$parentUrl:$themeUrl);		$this->data['dataUrl'] = $this->request->base_url . '/site/data/';		// Include the global functions.php and the functions.php that are part of the theme		$mvc = &$this;		$functionsPath = MVC_INSTALL_PATH . "/themes/functions.php";		if(is_file($functionsPath))		{			include $functionsPath;		}		if($parentPath)		{			if(is_file("{$parentPath}/functions.php"))			{				include "{$parentPath}/functions.php";			}		}				if(is_file("{$themePath}/functions.php"))		{			include "{$themePath}/functions.php";		}		// Extract $ly->data to own variables and handover to the template file		extract($this->data);		extract($this->views->GetData());				if (isset($this->config['theme']['data']))		{			extract($this->config['theme']['data']);		}				$templateFile = (isset($this->config['theme']['template_file'])) ? $this->config['theme']['template_file'] : 'default.tpl.php';				if(is_file("{$themePath}/{$templateFile}"))		{			include("{$themePath}/{$templateFile}");		}		else if(is_file("{$parentPath}/{$templateFile}"))		{			include("{$parentPath}/{$templateFile}");		}		else		{			throw new Exception('No such template file.');		}	}		/**	* Adds an exception message.	*	*	*/		public function AddExceptionMessage($message)	{		$this->exceptionMessages .= $message;	}		/**	* Returns all exception messages.	*	*	*/		public function GetExceptionMessages()	{		return $this->exceptionMessages;	}}